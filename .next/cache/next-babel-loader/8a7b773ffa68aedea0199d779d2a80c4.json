{"ast":null,"code":"var _jsxFileName = \"/Users/Stepan/Documents/code/proj/game-change/src/components/Selectable.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport * as actions from '../redux/actions';\nvar Select = styled.div.withConfig({\n  displayName: \"Selectable__Select\",\n  componentId: \"y8a9df-0\"\n})([\"position:relative;display:inline-block;margin-right:10px;\"]);\n_c = Select;\nvar Listbox = styled.div.withConfig({\n  displayName: \"Selectable__Listbox\",\n  componentId: \"y8a9df-1\"\n})([\"display:\", \";position:absolute;top:0;z-index:1;width:100%;background-color:white;border-radius:5px;button{border:none;font-size:16px;padding:5px 10px;width:calc(100% - 10px);margin:5px 5px;display:block;box-sizing:border-box;border-radius:5px;&:hover{background-color:rgb(200,200,200);cursor:pointer;}}\"], function (props) {\n  return props.open ? 'block' : 'none';\n});\n_c2 = Listbox;\nvar Selectname = styled.div.withConfig({\n  displayName: \"Selectable__Selectname\",\n  componentId: \"y8a9df-2\"\n})([\"background-color:#444;width:150px;padding:10px 15px;border-radius:5px;\"]);\n_c3 = Selectname;\n\nfunction Selectable(_ref) {\n  _s();\n\n  var _this = this;\n\n  var title = _ref.title,\n      items = _ref.items,\n      word = _ref.word,\n      fetchItems = _ref.fetchItems,\n      filter = _ref.filter,\n      order = _ref.order,\n      queryParam = _ref.queryParam;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var listRef = useRef();\n  var btnRef = useRef([]);\n\n  function handleSelect(close) {\n    console.log(btnRef);\n    setOpen(true);\n    document.addEventListener('click', func);\n\n    function func(event) {\n      var x = false;\n\n      var _iterator = _createForOfIteratorHelper(listRef.current.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var it = _step.value;\n\n          if (it.contains(event.target)) {\n            console.log('yo');\n            x = true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var isClickInside = listRef.current.contains(event.target) || x;\n\n      if (!isClickInside) {\n        //the click was outside the specifiedElement, do something\n        setOpen(false);\n        document.removeEventListener('click', func);\n      }\n    }\n  }\n\n  console.log(open);\n  return __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(Selectname, {\n    onClick: function onClick() {\n      return handleSelect();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, title), __jsx(Listbox, {\n    open: open,\n    ref: listRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, items.map(function (item, id) {\n    var o = {};\n    o[queryParam] = item[1];\n    return __jsx(\"div\", {\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 28\n      }\n    }, __jsx(\"button\", {\n      ref: btnRef[id],\n      onClick: function onClick() {\n        fetchItems(Object.assign({\n          word: word,\n          order: order,\n          filter: filter\n        }, o));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 42\n      }\n    }, item[0]));\n  })));\n}\n\n_s(Selectable, \"chpITI2HJ+j+UWwwCxCGYXW3Ik8=\");\n\n_c4 = Selectable;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    filter: state.filter,\n    order: state.order,\n    word: state.searchWord\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchItems: function fetchItems(x) {\n      return dispatch(actions.fetchItems(x));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectable);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Select\");\n$RefreshReg$(_c2, \"Listbox\");\n$RefreshReg$(_c3, \"Selectname\");\n$RefreshReg$(_c4, \"Selectable\");","map":{"version":3,"sources":["/Users/Stepan/Documents/code/proj/game-change/src/components/Selectable.js"],"names":["React","useState","useRef","connect","styled","actions","Select","div","Listbox","props","open","Selectname","Selectable","title","items","word","fetchItems","filter","order","queryParam","setOpen","listRef","btnRef","handleSelect","close","console","log","document","addEventListener","func","event","x","current","children","it","contains","target","isClickInside","removeEventListener","map","item","id","o","Object","assign","mapStateToProps","state","searchWord","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport * as actions from '../redux/actions'\n\n\nconst Select = styled.div`\n    position:relative;\n    display: inline-block;\n    margin-right: 10px;\n`\nconst Listbox = styled.div`\n    display:${props => props.open ? 'block' : 'none'};\n    position: absolute;\n    top:0;\n    z-index:1;\n    width: 100%;\n    background-color:white;\n    border-radius:5px;\n    button{\n        border:none;\n        font-size: 16px;\n        padding: 5px 10px;\n        width: calc(100% - 10px);\n        margin:5px 5px;\n        display:block;\n        box-sizing:border-box;\n        border-radius: 5px;\n        &:hover{\n            background-color:rgb(200,200,200);\n            cursor: pointer;\n        }\n    }\n`\nconst Selectname = styled.div`\n    background-color:#444;\n    width: 150px;\n    padding: 10px 15px;\n    border-radius: 5px;\n    \n`\n\nfunction Selectable({ title, items, word, fetchItems, filter, order, queryParam }) {\n\n    const [open, setOpen] = useState(false)\n    const listRef = useRef()\n    const btnRef = useRef([])\n\n    function handleSelect(close) {\n\n\n        console.log(btnRef)\n        setOpen(true)\n\n\n        document.addEventListener('click', func);\n\n        function func(event) {\n\n            let x = false\n            for (let it of listRef.current.children) {\n\n                if (it.contains(event.target)) { console.log('yo'); x = true; }\n            }\n            var isClickInside = listRef.current.contains(event.target) || x;\n\n            if (!isClickInside) {\n                //the click was outside the specifiedElement, do something\n\n                setOpen(false)\n                document.removeEventListener('click', func)\n            }\n        }\n    }\n\n    console.log(open)\n    return (\n        <Select>\n            <Selectname\n                onClick={() => handleSelect()}\n            >{title}</Selectname>\n            <Listbox open={open} ref={listRef}>\n                {items.map((item, id) => {\n                    let o = {}\n                    o[queryParam] = item[1]\n\n                    return <div key={id}><button\n                        ref={btnRef[id]}\n                        onClick={() => {\n                            fetchItems(Object.assign({ word, order, filter }, o))\n\n                        }}\n                    >{item[0]}</button></div>\n                })}\n            </Listbox>\n        </Select >\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    filter: state.filter,\n    order: state.order,\n    word: state.searchWord\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchItems: (x) => dispatch(actions.fetchItems(x))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectable)\n\n"]},"metadata":{},"sourceType":"module"}