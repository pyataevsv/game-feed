{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport Card from '../components/Card';\nimport * as actions from '../redux/actions';\nconst Wrapper = styled.div.withConfig({\n  displayName: \"Feed__Wrapper\",\n  componentId: \"he9v8d-0\"\n})([\"display:flex;flex-wrap:wrap;@media (max-width:652px){flex-direction:column;align-items:center;}\"]);\n\nfunction Feed({\n  items,\n  isFetching,\n  fetchItems\n}) {\n  const noFetch = useRef(false);\n  useEffect(() => {\n    document.addEventListener('scroll', foo);\n\n    function foo() {\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        console.log('yo');\n\n        if (!noFetch.current) {\n          fetchItems({\n            reset: false\n          });\n          noFetch.current = true;\n          setTimeout(() => {\n            noFetch.current = false;\n          }, 2000);\n        }\n      }\n    }\n\n    return () => {\n      document.removeEventListener('scroll', foo);\n    };\n  });\n\n  const Items = () => __jsx(React.Fragment, null, items.map((item, id) => __jsx(Card, {\n    key: id,\n    item: item\n  })));\n\n  return __jsx(React.Fragment, null, __jsx(Wrapper, null, __jsx(Items, null)), isFetching ? __jsx(\"div\", null, \"Loading....\") : null);\n}\n\nconst mapStateToProps = state => ({\n  items: state.items,\n  isFetching: state.isFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItems: x => dispatch(actions.fetchItems(x))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feed);","map":null,"metadata":{},"sourceType":"module"}