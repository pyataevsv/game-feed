{"ast":null,"code":"var _jsxFileName = \"/Users/Stepan/Documents/code/proj/game-change/src/components/Selectable.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport * as actions from '../redux/actions';\nconst Select = styled.div.withConfig({\n  displayName: \"Selectable__Select\",\n  componentId: \"y8a9df-0\"\n})([\"position:relative;display:inline-block;margin-right:10px;\"]);\nconst Listbox = styled.div.withConfig({\n  displayName: \"Selectable__Listbox\",\n  componentId: \"y8a9df-1\"\n})([\"display:\", \";position:absolute;top:0;z-index:1;width:100%;background-color:white;border-radius:5px;button{border:none;font-size:16px;padding:5px 10px;width:calc(100% - 10px);margin:5px 5px;display:block;box-sizing:border-box;border-radius:5px;&:hover{background-color:rgb(200,200,200);cursor:pointer;}}\"], props => props.open ? 'block' : 'none');\nconst Selectname = styled.div.withConfig({\n  displayName: \"Selectable__Selectname\",\n  componentId: \"y8a9df-2\"\n})([\"background-color:#444;width:150px;padding:5px 15px;border-radius:5px;\"]);\n\nfunction Selectable({\n  items,\n  word,\n  fetchItems,\n  filter,\n  order,\n  queryParam\n}) {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const listRef = useRef();\n\n  function handleSelect(e) {\n    setOpen(true);\n    document.addEventListener('click', func);\n  }\n\n  function func(event) {\n    const specifiedElement = listRef.current;\n    var isClickInside = specifiedElement.contains(event.target);\n\n    if (!isClickInside) {\n      //the click was outside the specifiedElement, do something\n      setOpen(false);\n      document.removeEventListener('click', func);\n    }\n  }\n\n  return __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(Selectname, {\n    onClick: () => handleSelect(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Platforms\"), __jsx(Listbox, {\n    open: open,\n    ref: listRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, items.map((item, id) => {\n    let o = {};\n    o[queryParam] = item[1];\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 28\n      }\n    }, __jsx(\"button\", {\n      onClick: () => fetchItems(Object.assign({\n        word,\n        order,\n        filter\n      }, o)),\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, item[0]));\n  })));\n}\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  order: state.order,\n  word: state.searchWord\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItems: x => dispatch(actions.fetchItems(x))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectable);","map":{"version":3,"sources":["/Users/Stepan/Documents/code/proj/game-change/src/components/Selectable.js"],"names":["React","useState","useRef","connect","styled","actions","Select","div","Listbox","props","open","Selectname","Selectable","items","word","fetchItems","filter","order","queryParam","setOpen","listRef","handleSelect","e","document","addEventListener","func","event","specifiedElement","current","isClickInside","contains","target","removeEventListener","map","item","id","o","Object","assign","mapStateToProps","state","searchWord","mapDispatchToProps","dispatch","x"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\nimport * as actions from '../redux/actions'\n\n\nconst Select = styled.div`\n    position:relative;\n    display: inline-block;\n    margin-right: 10px;\n`\nconst Listbox = styled.div`\n    display:${props => props.open ? 'block' : 'none'};\n    position: absolute;\n    top:0;\n    z-index:1;\n    width: 100%;\n    background-color:white;\n    border-radius:5px;\n    button{\n        border:none;\n        font-size: 16px;\n        padding: 5px 10px;\n        width: calc(100% - 10px);\n        margin:5px 5px;\n        display:block;\n        box-sizing:border-box;\n        border-radius: 5px;\n        &:hover{\n            background-color:rgb(200,200,200);\n            cursor: pointer;\n        }\n    }\n`\nconst Selectname = styled.div`\n    background-color:#444;\n    width: 150px;\n    padding: 5px 15px;\n    border-radius: 5px;\n    \n`\n\nfunction Selectable({ items, word, fetchItems, filter, order, queryParam }) {\n\n    const [open, setOpen] = useState(false)\n    const listRef = useRef()\n\n    function handleSelect(e) {\n        setOpen(true)\n        document.addEventListener('click', func);\n    }\n\n\n    function func(event) {\n        const specifiedElement = listRef.current;\n        var isClickInside = specifiedElement.contains(event.target);\n\n        if (!isClickInside) {\n            //the click was outside the specifiedElement, do something\n            setOpen(false)\n            document.removeEventListener('click', func)\n        }\n    }\n\n    return (\n        <Select>\n            <Selectname\n                onClick={() => handleSelect()}\n            >Platforms</Selectname>\n            <Listbox open={open} ref={listRef}>\n                {items.map((item, id) => {\n                    let o = {}\n                    o[queryParam] = item[1]\n\n                    return <div><button\n                        onClick={() => fetchItems(Object.assign({ word, order, filter }, o))}\n                        key={id}>{item[0]}</button></div>\n                })}\n            </Listbox>\n        </Select >\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    filter: state.filter,\n    order: state.order,\n    word: state.searchWord\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchItems: (x) => dispatch(actions.fetchItems(x))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectable)\n\n"]},"metadata":{},"sourceType":"module"}