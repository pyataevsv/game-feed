{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport Card from '../components/Card';\nimport * as actions from '../redux/actions';\nvar Wrapper = styled.div.withConfig({\n  displayName: \"Feed__Wrapper\",\n  componentId: \"he9v8d-0\"\n})([\"display:flex;flex-wrap:wrap;@media (max-width:652px){flex-direction:column;align-items:center;}\"]);\n\nfunction Feed(_ref) {\n  var items = _ref.items,\n      isFetching = _ref.isFetching,\n      fetchItems = _ref.fetchItems;\n  var noFetch = useRef(false);\n  useEffect(function () {\n    document.addEventListener('scroll', foo);\n\n    function foo() {\n      if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n        console.log('yo');\n\n        if (!noFetch.current) {\n          fetchItems({\n            reset: false\n          });\n          noFetch.current = true;\n          setTimeout(function () {\n            noFetch.current = false;\n          }, 2000);\n        }\n      }\n    }\n\n    return function () {\n      document.removeEventListener('scroll', foo);\n    };\n  });\n\n  var Items = function Items() {\n    return __jsx(React.Fragment, null, items.map(function (item, id) {\n      return __jsx(Card, {\n        key: id,\n        item: item\n      });\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Wrapper, null, __jsx(Items, null)), isFetching ? __jsx(\"div\", null, \"Loading....\") : null);\n}\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    items: state.items,\n    isFetching: state.isFetching\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchItems: function fetchItems(x) {\n      return dispatch(actions.fetchItems(x));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feed);","map":null,"metadata":{},"sourceType":"module"}