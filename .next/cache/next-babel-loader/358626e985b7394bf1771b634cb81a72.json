{"ast":null,"code":"//const { combineReducers } = require(\"redux\")\nimport * as actions from './actions';\nimport { combineReducers } from 'redux';\nconst iniState = {\n  items: [],\n  filter: null,\n  searchWord: null,\n  order: null,\n  isFetching: false,\n  fetchingError: {\n    status: null\n  }\n};\nconst rootReducer = combineReducers({\n  filter: filterReducer,\n  searchWord: searchWordReducer,\n  order: orderReducer,\n  isFetching: fetchingReducer,\n  items: itemsReducer,\n  fetchingError: fetchingErrorReducer\n});\nexport default rootReducer;\n\nfunction filterReducer(state = iniState.filter, action) {\n  if (action.type === actions.SET_FILTER) {\n    return action.filter;\n  }\n\n  return state;\n}\n\nfunction searchWordReducer(state = iniState.searchWord, action) {\n  if (action.type === actions.SET_WORD) {\n    return action.word;\n  }\n\n  return state;\n}\n\nfunction orderReducer(state = iniState.order, action) {\n  if (action.type === actions.SET_ORDER) {\n    return action.order;\n  }\n\n  return state;\n}\n\nfunction fetchingReducer(state = iniState.isFetching, action) {\n  switch (action.type) {\n    case actions.SET_IS_FETCHING:\n      return true;\n\n    case actions.SET_IS_NOT_FETCHING:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nfunction itemsReducer(state = iniState.items, action) {\n  switch (action.type) {\n    case actions.ADD_ITEMS:\n      return state.concat(action.items);\n\n    case actions.RESET_ITEMS:\n      return action.items;\n\n    default:\n      return state;\n  }\n}\n\nfunction fetchingErrorReducer(state = iniState.fetchingError, action) {\n  if (action.type === actions.SET_FETCHING_ERROR) {\n    return action.error;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/Stepan/Documents/code/proj/game-change/src/redux/reducers.js"],"names":["actions","combineReducers","iniState","items","filter","searchWord","order","isFetching","fetchingError","status","rootReducer","filterReducer","searchWordReducer","orderReducer","fetchingReducer","itemsReducer","fetchingErrorReducer","state","action","type","SET_FILTER","SET_WORD","word","SET_ORDER","SET_IS_FETCHING","SET_IS_NOT_FETCHING","ADD_ITEMS","concat","RESET_ITEMS","SET_FETCHING_ERROR","error"],"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAGA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,EADM;AAEbC,EAAAA,MAAM,EAAE,IAFK;AAGbC,EAAAA,UAAU,EAAE,IAHC;AAIbC,EAAAA,KAAK,EAAE,IAJM;AAKbC,EAAAA,UAAU,EAAE,KALC;AAMbC,EAAAA,aAAa,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV;AANF,CAAjB;AASA,MAAMC,WAAW,GAAGT,eAAe,CAAC;AAChCG,EAAAA,MAAM,EAAEO,aADwB;AAEhCN,EAAAA,UAAU,EAAEO,iBAFoB;AAGhCN,EAAAA,KAAK,EAAEO,YAHyB;AAIhCN,EAAAA,UAAU,EAAEO,eAJoB;AAKhCX,EAAAA,KAAK,EAAEY,YALyB;AAMhCP,EAAAA,aAAa,EAAEQ;AANiB,CAAD,CAAnC;AASA,eAAeN,WAAf;;AAEA,SAASC,aAAT,CAAuBM,KAAK,GAAGf,QAAQ,CAACE,MAAxC,EAAgDc,MAAhD,EAAwD;AACpD,MAAIA,MAAM,CAACC,IAAP,KAAgBnB,OAAO,CAACoB,UAA5B,EAAwC;AACpC,WAAOF,MAAM,CAACd,MAAd;AACH;;AACD,SAAOa,KAAP;AACH;;AACD,SAASL,iBAAT,CAA2BK,KAAK,GAAGf,QAAQ,CAACG,UAA5C,EAAwDa,MAAxD,EAAgE;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgBnB,OAAO,CAACqB,QAA5B,EAAsC;AAClC,WAAOH,MAAM,CAACI,IAAd;AACH;;AACD,SAAOL,KAAP;AACH;;AACD,SAASJ,YAAT,CAAsBI,KAAK,GAAGf,QAAQ,CAACI,KAAvC,EAA8CY,MAA9C,EAAsD;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgBnB,OAAO,CAACuB,SAA5B,EAAuC;AACnC,WAAOL,MAAM,CAACZ,KAAd;AACH;;AACD,SAAOW,KAAP;AACH;;AACD,SAASH,eAAT,CAAyBG,KAAK,GAAGf,QAAQ,CAACK,UAA1C,EAAsDW,MAAtD,EAA8D;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,OAAO,CAACwB,eAAb;AACI,aAAO,IAAP;;AACJ,SAAKxB,OAAO,CAACyB,mBAAb;AACI,aAAO,KAAP;;AACJ;AACI,aAAOR,KAAP;AANR;AAQH;;AACD,SAASF,YAAT,CAAsBE,KAAK,GAAGf,QAAQ,CAACC,KAAvC,EAA8Ce,MAA9C,EAAsD;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,OAAO,CAAC0B,SAAb;AACI,aAAOT,KAAK,CAACU,MAAN,CAAaT,MAAM,CAACf,KAApB,CAAP;;AACJ,SAAKH,OAAO,CAAC4B,WAAb;AACI,aAAOV,MAAM,CAACf,KAAd;;AAEJ;AACI,aAAOc,KAAP;AAPR;AASH;;AACD,SAASD,oBAAT,CAA8BC,KAAK,GAAGf,QAAQ,CAACM,aAA/C,EAA8DU,MAA9D,EAAsE;AAElE,MAAIA,MAAM,CAACC,IAAP,KAAgBnB,OAAO,CAAC6B,kBAA5B,EAAgD;AAC5C,WAAOX,MAAM,CAACY,KAAd;AACH;;AACD,SAAOb,KAAP;AACH","sourcesContent":["//const { combineReducers } = require(\"redux\")\nimport * as actions from './actions'\nimport { combineReducers } from 'redux'\n\n\nconst iniState = {\n    items: [],\n    filter: null,\n    searchWord: null,\n    order: null,\n    isFetching: false,\n    fetchingError: { status: null, }\n}\n\nconst rootReducer = combineReducers({\n    filter: filterReducer,\n    searchWord: searchWordReducer,\n    order: orderReducer,\n    isFetching: fetchingReducer,\n    items: itemsReducer,\n    fetchingError: fetchingErrorReducer\n})\n\nexport default rootReducer\n\nfunction filterReducer(state = iniState.filter, action) {\n    if (action.type === actions.SET_FILTER) {\n        return action.filter\n    }\n    return state\n}\nfunction searchWordReducer(state = iniState.searchWord, action) {\n    if (action.type === actions.SET_WORD) {\n        return action.word\n    }\n    return state\n}\nfunction orderReducer(state = iniState.order, action) {\n    if (action.type === actions.SET_ORDER) {\n        return action.order\n    }\n    return state\n}\nfunction fetchingReducer(state = iniState.isFetching, action) {\n    switch (action.type) {\n        case actions.SET_IS_FETCHING:\n            return true\n        case actions.SET_IS_NOT_FETCHING:\n            return false\n        default:\n            return state\n    }\n}\nfunction itemsReducer(state = iniState.items, action) {\n\n    switch (action.type) {\n        case actions.ADD_ITEMS:\n            return state.concat(action.items)\n        case actions.RESET_ITEMS:\n            return action.items\n\n        default:\n            return state\n    }\n}\nfunction fetchingErrorReducer(state = iniState.fetchingError, action) {\n\n    if (action.type === actions.SET_FETCHING_ERROR) {\n        return action.error\n    }\n    return state\n}\n"]},"metadata":{},"sourceType":"module"}