{"ast":null,"code":"//const { combineReducers } = require(\"redux\")\nimport * as actions from './actions';\nimport { combineReducers } from 'redux';\nvar iniState = {\n  items: [],\n  filter: null,\n  searchWord: null,\n  order: null,\n  isFetching: false\n};\nvar rootReducer = combineReducers({\n  filter: filterReducer,\n  searchWord: searchWordReducer,\n  order: orderReducer,\n  isFetching: fetchingReducer\n});\nexport default rootReducer;\n\nfunction filterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iniState.filter;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === actions.SET_FILTER) {\n    return action.filter;\n  }\n\n  return state;\n}\n\nfunction searchWordReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iniState.searchWord;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === actions.SET_WORD) {\n    return action.word;\n  }\n\n  return state;\n}\n\nfunction orderReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iniState.order;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === actions.SET_ORDER) {\n    return action.order;\n  }\n\n  return state;\n}\n\nfunction fetchingReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iniState.isFetching;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.SET_IS_FETCHING:\n      return true;\n\n    case actions.SET_IS_NOT_FETCHING:\n      return false;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Stepan/Documents/code/proj/game-change/src/redux/reducers.js"],"names":["actions","combineReducers","iniState","items","filter","searchWord","order","isFetching","rootReducer","filterReducer","searchWordReducer","orderReducer","fetchingReducer","state","action","type","SET_FILTER","SET_WORD","word","SET_ORDER","SET_IS_FETCHING","SET_IS_NOT_FETCHING"],"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAGA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE,EADM;AAEbC,EAAAA,MAAM,EAAE,IAFK;AAGbC,EAAAA,UAAU,EAAE,IAHC;AAIbC,EAAAA,KAAK,EAAE,IAJM;AAKbC,EAAAA,UAAU,EAAE;AALC,CAAjB;AAQA,IAAMC,WAAW,GAAGP,eAAe,CAAC;AAChCG,EAAAA,MAAM,EAAEK,aADwB;AAEhCJ,EAAAA,UAAU,EAAEK,iBAFoB;AAGhCJ,EAAAA,KAAK,EAAEK,YAHyB;AAIhCJ,EAAAA,UAAU,EAAEK;AAJoB,CAAD,CAAnC;AAQA,eAAeJ,WAAf;;AAEA,SAASC,aAAT,GAAwD;AAAA,MAAjCI,KAAiC,uEAAzBX,QAAQ,CAACE,MAAgB;AAAA,MAARU,MAAQ;;AACpD,MAAIA,MAAM,CAACC,IAAP,KAAgBf,OAAO,CAACgB,UAA5B,EAAwC;AACpC,WAAOF,MAAM,CAACV,MAAd;AACH;;AACD,SAAOS,KAAP;AACH;;AACD,SAASH,iBAAT,GAAgE;AAAA,MAArCG,KAAqC,uEAA7BX,QAAQ,CAACG,UAAoB;AAAA,MAARS,MAAQ;;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgBf,OAAO,CAACiB,QAA5B,EAAsC;AAClC,WAAOH,MAAM,CAACI,IAAd;AACH;;AACD,SAAOL,KAAP;AACH;;AACD,SAASF,YAAT,GAAsD;AAAA,MAAhCE,KAAgC,uEAAxBX,QAAQ,CAACI,KAAe;AAAA,MAARQ,MAAQ;;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgBf,OAAO,CAACmB,SAA5B,EAAuC;AACnC,WAAOL,MAAM,CAACR,KAAd;AACH;;AACD,SAAOO,KAAP;AACH;;AACD,SAASD,eAAT,GAA8D;AAAA,MAArCC,KAAqC,uEAA7BX,QAAQ,CAACK,UAAoB;AAAA,MAARO,MAAQ;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKf,OAAO,CAACoB,eAAb;AACI,aAAO,IAAP;;AACJ,SAAKpB,OAAO,CAACqB,mBAAb;AACI,aAAO,KAAP;;AACJ;AACI,aAAOR,KAAP;AANR;AASH","sourcesContent":["//const { combineReducers } = require(\"redux\")\nimport * as actions from './actions'\nimport { combineReducers } from 'redux'\n\n\nconst iniState = {\n    items: [],\n    filter: null,\n    searchWord: null,\n    order: null,\n    isFetching: false,\n}\n\nconst rootReducer = combineReducers({\n    filter: filterReducer,\n    searchWord: searchWordReducer,\n    order: orderReducer,\n    isFetching: fetchingReducer\n\n})\n\nexport default rootReducer\n\nfunction filterReducer(state = iniState.filter, action) {\n    if (action.type === actions.SET_FILTER) {\n        return action.filter\n    }\n    return state\n}\nfunction searchWordReducer(state = iniState.searchWord, action) {\n    if (action.type === actions.SET_WORD) {\n        return action.word\n    }\n    return state\n}\nfunction orderReducer(state = iniState.order, action) {\n    if (action.type === actions.SET_ORDER) {\n        return action.order\n    }\n    return state\n}\nfunction fetchingReducer(state = iniState.isFetching, action) {\n    switch (action.type) {\n        case actions.SET_IS_FETCHING:\n            return true\n        case actions.SET_IS_NOT_FETCHING:\n            return false\n        default:\n            return state\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}