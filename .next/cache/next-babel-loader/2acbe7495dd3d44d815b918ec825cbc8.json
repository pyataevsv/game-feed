{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport * as actions from '../redux/actions';\nconst platforms = {\n  PC: '4',\n  iOS: '3',\n  macOS: '5',\n  Linux: '6',\n  Android: '21',\n  PlayStation: '18,16,15,27',\n  XboxOne: '1,14,80',\n  Nintendo: '7,9,8'\n};\nconst Select = styled.div.withConfig({\n  displayName: \"Selectable__Select\",\n  componentId: \"y8a9df-0\"\n})([\"position:relative;display:inline-block;margin-right:10px;width:120px;@media (max-width:652px){width:100%;box-sizing:border-box;margin-bottom:10px;}\"]);\nconst Listbox = styled.div.withConfig({\n  displayName: \"Selectable__Listbox\",\n  componentId: \"y8a9df-1\"\n})([\"display:\", \";position:absolute;top:0;z-index:1;width:100%;background-color:white;border-radius:5px;button{border:none;font-size:16px;padding:5px 10px;width:calc(100% - 10px);margin:5px 5px;display:block;box-sizing:border-box;border-radius:5px;&:hover{background-color:rgb(200,200,200);cursor:pointer;}}\"], props => props.open ? 'block' : 'none');\nconst Selectname = styled.div.withConfig({\n  displayName: \"Selectable__Selectname\",\n  componentId: \"y8a9df-2\"\n})([\"background-color:\", \";padding:10px 15px;border-radius:5px;&:hover{background-color:#555;cursor:pointer;}\"], props => props.active ? '#999' : '#444');\n\nfunction Selectable({\n  title,\n  items,\n  word,\n  fetchItems,\n  filter,\n  order,\n  queryParam,\n  active\n}) {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const listRef = useRef();\n  const btnRef = useRef([]);\n\n  function handleSelect(close) {\n    setOpen(true);\n    document.addEventListener('click', func);\n\n    function func(event) {\n      let x = false;\n\n      for (let it of listRef.current.children) {\n        if (it.contains(event.target)) {\n          x = true;\n        }\n      }\n\n      var isClickInside = listRef.current.contains(event.target);\n\n      if (!isClickInside || x) {\n        setOpen(false);\n        document.removeEventListener('click', func);\n      }\n    }\n  }\n\n  function activeToName(active, queryParam) {\n    if (!active) return '';\n\n    if (queryParam == 'order') {\n      let a = active.split('');\n      a.shift();\n      return ': ' + a.join('');\n    }\n\n    if (queryParam == 'filter') {\n      return ': ' + Object.entries(platforms).filter(item => item[1] == active)[0][0];\n    }\n  }\n\n  return __jsx(Select, null, __jsx(Selectname, {\n    active: active,\n    onClick: () => handleSelect()\n  }, title + activeToName(active, queryParam), \" \\u2207\"), __jsx(Listbox, {\n    open: open,\n    ref: listRef\n  }, items.map((item, id) => {\n    let o = {};\n    o[queryParam] = item[1];\n    return __jsx(\"div\", {\n      key: id\n    }, __jsx(\"button\", {\n      ref: btnRef[id],\n      onClick: () => {\n        fetchItems(Object.assign({\n          word,\n          order,\n          filter\n        }, o));\n      }\n    }, item[0]));\n  }), __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: () => {\n      console.log(Object.assign({\n        word,\n        order,\n        filter\n      }, {\n        [queryParam]: null\n      }));\n      fetchItems(Object.assign({\n        word,\n        order,\n        filter\n      }, {\n        [queryParam]: null\n      }));\n    }\n  }, \"Clear \\u2205\"))));\n}\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n  order: state.order,\n  word: state.searchWord\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchItems: x => dispatch(actions.fetchItems(x))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectable);","map":null,"metadata":{},"sourceType":"module"}